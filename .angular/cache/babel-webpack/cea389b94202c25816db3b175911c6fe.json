{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/cabra/PROJETOS/CIM/RDA/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseEnumPipe = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst index_1 = require(\"../index\");\n\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseEnum Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n\n\nlet ParseEnumPipe = class ParseEnumPipe {\n  constructor(enumType, options) {\n    this.enumType = enumType;\n\n    if (!enumType) {\n      throw new Error(`\"ParseEnumPipe\" requires \"enumType\" argument specified (to validate input values).`);\n    }\n\n    options = options || {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST\n    } = options;\n\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n\n\n  transform(value, metadata) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.isEnum(value)) {\n        throw _this.exceptionFactory('Validation failed (enum string is expected)');\n      }\n\n      return value;\n    })();\n  }\n\n  isEnum(value) {\n    const enumValues = Object.keys(this.enumType).map(item => this.enumType[item]);\n    return enumValues.indexOf(value) >= 0;\n  }\n\n};\nParseEnumPipe = tslib_1.__decorate([index_1.Injectable(), tslib_1.__param(1, index_1.Optional()), tslib_1.__metadata(\"design:paramtypes\", [Object, Object])], ParseEnumPipe);\nexports.ParseEnumPipe = ParseEnumPipe;","map":{"version":3,"sources":["C:/Users/cabra/PROJETOS/CIM/BACKEND/node_modules/@nestjs/common/pipes/parse-enum.pipe.js"],"names":["Object","defineProperty","exports","value","ParseEnumPipe","tslib_1","require","index_1","http_error_by_code_util_1","constructor","enumType","options","Error","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","transform","metadata","isEnum","enumValues","keys","map","item","indexOf","__decorate","Injectable","__param","Optional","__metadata"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,kCAAD,CAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIF,aAAa,GAAG,MAAMA,aAAN,CAAoB;AACpCK,EAAAA,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoB;AAC3B,SAAKD,QAAL,GAAgBA,QAAhB;;AACA,QAAI,CAACA,QAAL,EAAe;AACX,YAAM,IAAIE,KAAJ,CAAW,oFAAX,CAAN;AACH;;AACDD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAM;AAAEE,MAAAA,gBAAF;AAAoBC,MAAAA,mBAAmB,GAAGP,OAAO,CAACQ,UAAR,CAAmBC;AAA7D,QAA6EL,OAAnF;;AACA,SAAKE,gBAAL,GACIA,gBAAgB,KACXI,KAAK,IAAI,IAAIT,yBAAyB,CAACU,eAA1B,CAA0CJ,mBAA1C,CAAJ,CAAmEG,KAAnE,CADE,CADpB;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUE,EAAAA,SAAS,CAAChB,KAAD,EAAQiB,QAAR,EAAkB;AAAA;;AAAA;AAC7B,UAAI,CAAC,KAAI,CAACC,MAAL,CAAYlB,KAAZ,CAAL,EAAyB;AACrB,cAAM,KAAI,CAACU,gBAAL,CAAsB,6CAAtB,CAAN;AACH;;AACD,aAAOV,KAAP;AAJ6B;AAKhC;;AACDkB,EAAAA,MAAM,CAAClB,KAAD,EAAQ;AACV,UAAMmB,UAAU,GAAGtB,MAAM,CAACuB,IAAP,CAAY,KAAKb,QAAjB,EAA2Bc,GAA3B,CAA+BC,IAAI,IAAI,KAAKf,QAAL,CAAce,IAAd,CAAvC,CAAnB;AACA,WAAOH,UAAU,CAACI,OAAX,CAAmBvB,KAAnB,KAA6B,CAApC;AACH;;AA5BmC,CAAxC;AA8BAC,aAAa,GAAGC,OAAO,CAACsB,UAAR,CAAmB,CAC/BpB,OAAO,CAACqB,UAAR,EAD+B,EAE/BvB,OAAO,CAACwB,OAAR,CAAgB,CAAhB,EAAmBtB,OAAO,CAACuB,QAAR,EAAnB,CAF+B,EAG/BzB,OAAO,CAAC0B,UAAR,CAAmB,mBAAnB,EAAwC,CAAC/B,MAAD,EAASA,MAAT,CAAxC,CAH+B,CAAnB,EAIbI,aAJa,CAAhB;AAKAF,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseEnumPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst index_1 = require(\"../index\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseEnum Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseEnumPipe = class ParseEnumPipe {\n    constructor(enumType, options) {\n        this.enumType = enumType;\n        if (!enumType) {\n            throw new Error(`\"ParseEnumPipe\" requires \"enumType\" argument specified (to validate input values).`);\n        }\n        options = options || {};\n        const { exceptionFactory, errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        if (!this.isEnum(value)) {\n            throw this.exceptionFactory('Validation failed (enum string is expected)');\n        }\n        return value;\n    }\n    isEnum(value) {\n        const enumValues = Object.keys(this.enumType).map(item => this.enumType[item]);\n        return enumValues.indexOf(value) >= 0;\n    }\n};\nParseEnumPipe = tslib_1.__decorate([\n    index_1.Injectable(),\n    tslib_1.__param(1, index_1.Optional()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object])\n], ParseEnumPipe);\nexports.ParseEnumPipe = ParseEnumPipe;\n"]},"metadata":{},"sourceType":"script"}