{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/cabra/PROJETOS/CIM/RDA/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationPipe = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst iterare_1 = require(\"iterare\");\n\nconst decorators_1 = require(\"../decorators\");\n\nconst core_1 = require(\"../decorators/core\");\n\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\n\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n\nconst load_package_util_1 = require(\"../utils/load-package.util\");\n\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n\nlet classValidator = {};\nlet classTransformer = {};\nlet ValidationPipe = class ValidationPipe {\n  constructor(options) {\n    options = options || {};\n\n    const {\n      transform,\n      disableErrorMessages,\n      errorHttpStatusCode,\n      expectedType,\n      transformOptions,\n      validateCustomDecorators\n    } = options,\n          validatorOptions = tslib_1.__rest(options, [\"transform\", \"disableErrorMessages\", \"errorHttpStatusCode\", \"expectedType\", \"transformOptions\", \"validateCustomDecorators\"]);\n\n    this.isTransformEnabled = !!transform;\n    this.validatorOptions = validatorOptions;\n    this.transformOptions = transformOptions;\n    this.isDetailedOutputDisabled = disableErrorMessages;\n    this.validateCustomDecorators = validateCustomDecorators || false;\n    this.errorHttpStatusCode = errorHttpStatusCode || http_status_enum_1.HttpStatus.BAD_REQUEST;\n    this.expectedType = expectedType;\n    this.exceptionFactory = options.exceptionFactory || this.createExceptionFactory();\n    classValidator = this.loadValidator();\n    classTransformer = this.loadTransformer();\n  }\n\n  loadValidator() {\n    return load_package_util_1.loadPackage('class-validator', 'ValidationPipe', () => require('class-validator'));\n  }\n\n  loadTransformer() {\n    return load_package_util_1.loadPackage('class-transformer', 'ValidationPipe', () => require('class-transformer'));\n  }\n\n  transform(value, metadata) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.expectedType) {\n        metadata = Object.assign(Object.assign({}, metadata), {\n          metatype: _this.expectedType\n        });\n      }\n\n      const metatype = metadata.metatype;\n\n      if (!metatype || !_this.toValidate(metadata)) {\n        return _this.isTransformEnabled ? _this.transformPrimitive(value, metadata) : value;\n      }\n\n      const originalValue = value;\n      value = _this.toEmptyIfNil(value);\n      const isNil = value !== originalValue;\n\n      const isPrimitive = _this.isPrimitive(value);\n\n      _this.stripProtoKeys(value);\n\n      let entity = classTransformer.plainToClass(metatype, value, _this.transformOptions);\n      const originalEntity = entity;\n      const isCtorNotEqual = entity.constructor !== metatype;\n\n      if (isCtorNotEqual && !isPrimitive) {\n        entity.constructor = metatype;\n      } else if (isCtorNotEqual) {\n        // when \"entity\" is a primitive value, we have to temporarily\n        // replace the entity to perform the validation against the original\n        // metatype defined inside the handler\n        entity = {\n          constructor: metatype\n        };\n      }\n\n      const errors = yield _this.validate(entity, _this.validatorOptions);\n\n      if (errors.length > 0) {\n        throw yield _this.exceptionFactory(errors);\n      }\n\n      if (isPrimitive) {\n        // if the value is a primitive value and the validation process has been successfully completed\n        // we have to revert the original value passed through the pipe\n        entity = originalEntity;\n      }\n\n      if (_this.isTransformEnabled) {\n        return entity;\n      }\n\n      if (isNil) {\n        // if the value was originally undefined or null, revert it back\n        return originalValue;\n      }\n\n      return Object.keys(_this.validatorOptions).length > 0 ? classTransformer.classToPlain(entity, _this.transformOptions) : value;\n    })();\n  }\n\n  createExceptionFactory() {\n    return (validationErrors = []) => {\n      if (this.isDetailedOutputDisabled) {\n        return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode]();\n      }\n\n      const errors = this.flattenValidationErrors(validationErrors);\n      return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode](errors);\n    };\n  }\n\n  toValidate(metadata) {\n    const {\n      metatype,\n      type\n    } = metadata;\n\n    if (type === 'custom' && !this.validateCustomDecorators) {\n      return false;\n    }\n\n    const types = [String, Boolean, Number, Array, Object, Buffer];\n    return !types.some(t => metatype === t) && !shared_utils_1.isNil(metatype);\n  }\n\n  transformPrimitive(value, metadata) {\n    if (!metadata.data) {\n      // leave top-level query/param objects unmodified\n      return value;\n    }\n\n    const {\n      type,\n      metatype\n    } = metadata;\n\n    if (type !== 'param' && type !== 'query') {\n      return value;\n    }\n\n    if (metatype === Boolean) {\n      return value === true || value === 'true';\n    }\n\n    if (metatype === Number) {\n      return +value;\n    }\n\n    return value;\n  }\n\n  toEmptyIfNil(value) {\n    return shared_utils_1.isNil(value) ? {} : value;\n  }\n\n  stripProtoKeys(value) {\n    delete value.__proto__;\n    const keys = Object.keys(value);\n    iterare_1.iterate(keys).filter(key => typeof value[key] === 'object' && value[key]).forEach(key => this.stripProtoKeys(value[key]));\n  }\n\n  isPrimitive(value) {\n    return ['number', 'boolean', 'string'].includes(typeof value);\n  }\n\n  validate(object, validatorOptions) {\n    return classValidator.validate(object, validatorOptions);\n  }\n\n  flattenValidationErrors(validationErrors) {\n    return iterare_1.iterate(validationErrors).map(error => this.mapChildrenToValidationErrors(error)).flatten().filter(item => !!item.constraints).map(item => Object.values(item.constraints)).flatten().toArray();\n  }\n\n  mapChildrenToValidationErrors(error, parentPath) {\n    if (!(error.children && error.children.length)) {\n      return [error];\n    }\n\n    const validationErrors = [];\n    parentPath = parentPath ? `${parentPath}.${error.property}` : error.property;\n\n    for (const item of error.children) {\n      if (item.children && item.children.length) {\n        validationErrors.push(...this.mapChildrenToValidationErrors(item, parentPath));\n      }\n\n      validationErrors.push(this.prependConstraintsWithParentProp(parentPath, item));\n    }\n\n    return validationErrors;\n  }\n\n  prependConstraintsWithParentProp(parentPath, error) {\n    const constraints = {};\n\n    for (const key in error.constraints) {\n      constraints[key] = `${parentPath}.${error.constraints[key]}`;\n    }\n\n    return Object.assign(Object.assign({}, error), {\n      constraints\n    });\n  }\n\n};\nValidationPipe = tslib_1.__decorate([core_1.Injectable(), tslib_1.__param(0, decorators_1.Optional()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ValidationPipe);\nexports.ValidationPipe = ValidationPipe;","map":{"version":3,"sources":["C:/Users/cabra/PROJETOS/CIM/BACKEND/node_modules/@nestjs/common/pipes/validation.pipe.js"],"names":["Object","defineProperty","exports","value","ValidationPipe","tslib_1","require","iterare_1","decorators_1","core_1","http_status_enum_1","http_error_by_code_util_1","load_package_util_1","shared_utils_1","classValidator","classTransformer","constructor","options","transform","disableErrorMessages","errorHttpStatusCode","expectedType","transformOptions","validateCustomDecorators","validatorOptions","__rest","isTransformEnabled","isDetailedOutputDisabled","HttpStatus","BAD_REQUEST","exceptionFactory","createExceptionFactory","loadValidator","loadTransformer","loadPackage","metadata","assign","metatype","toValidate","transformPrimitive","originalValue","toEmptyIfNil","isNil","isPrimitive","stripProtoKeys","entity","plainToClass","originalEntity","isCtorNotEqual","errors","validate","length","keys","classToPlain","validationErrors","HttpErrorByCode","flattenValidationErrors","type","types","String","Boolean","Number","Array","Buffer","some","t","data","__proto__","iterate","filter","key","forEach","includes","object","map","error","mapChildrenToValidationErrors","flatten","item","constraints","values","toArray","parentPath","children","property","push","prependConstraintsWithParentProp","__decorate","Injectable","__param","Optional","__metadata"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidationPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst iterare_1 = require(\"iterare\");\nconst decorators_1 = require(\"../decorators\");\nconst core_1 = require(\"../decorators/core\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst load_package_util_1 = require(\"../utils/load-package.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nlet classValidator = {};\nlet classTransformer = {};\nlet ValidationPipe = class ValidationPipe {\n    constructor(options) {\n        options = options || {};\n        const { transform, disableErrorMessages, errorHttpStatusCode, expectedType, transformOptions, validateCustomDecorators } = options, validatorOptions = tslib_1.__rest(options, [\"transform\", \"disableErrorMessages\", \"errorHttpStatusCode\", \"expectedType\", \"transformOptions\", \"validateCustomDecorators\"]);\n        this.isTransformEnabled = !!transform;\n        this.validatorOptions = validatorOptions;\n        this.transformOptions = transformOptions;\n        this.isDetailedOutputDisabled = disableErrorMessages;\n        this.validateCustomDecorators = validateCustomDecorators || false;\n        this.errorHttpStatusCode = errorHttpStatusCode || http_status_enum_1.HttpStatus.BAD_REQUEST;\n        this.expectedType = expectedType;\n        this.exceptionFactory =\n            options.exceptionFactory || this.createExceptionFactory();\n        classValidator = this.loadValidator();\n        classTransformer = this.loadTransformer();\n    }\n    loadValidator() {\n        return load_package_util_1.loadPackage('class-validator', 'ValidationPipe', () => require('class-validator'));\n    }\n    loadTransformer() {\n        return load_package_util_1.loadPackage('class-transformer', 'ValidationPipe', () => require('class-transformer'));\n    }\n    async transform(value, metadata) {\n        if (this.expectedType) {\n            metadata = Object.assign(Object.assign({}, metadata), { metatype: this.expectedType });\n        }\n        const metatype = metadata.metatype;\n        if (!metatype || !this.toValidate(metadata)) {\n            return this.isTransformEnabled\n                ? this.transformPrimitive(value, metadata)\n                : value;\n        }\n        const originalValue = value;\n        value = this.toEmptyIfNil(value);\n        const isNil = value !== originalValue;\n        const isPrimitive = this.isPrimitive(value);\n        this.stripProtoKeys(value);\n        let entity = classTransformer.plainToClass(metatype, value, this.transformOptions);\n        const originalEntity = entity;\n        const isCtorNotEqual = entity.constructor !== metatype;\n        if (isCtorNotEqual && !isPrimitive) {\n            entity.constructor = metatype;\n        }\n        else if (isCtorNotEqual) {\n            // when \"entity\" is a primitive value, we have to temporarily\n            // replace the entity to perform the validation against the original\n            // metatype defined inside the handler\n            entity = { constructor: metatype };\n        }\n        const errors = await this.validate(entity, this.validatorOptions);\n        if (errors.length > 0) {\n            throw await this.exceptionFactory(errors);\n        }\n        if (isPrimitive) {\n            // if the value is a primitive value and the validation process has been successfully completed\n            // we have to revert the original value passed through the pipe\n            entity = originalEntity;\n        }\n        if (this.isTransformEnabled) {\n            return entity;\n        }\n        if (isNil) {\n            // if the value was originally undefined or null, revert it back\n            return originalValue;\n        }\n        return Object.keys(this.validatorOptions).length > 0\n            ? classTransformer.classToPlain(entity, this.transformOptions)\n            : value;\n    }\n    createExceptionFactory() {\n        return (validationErrors = []) => {\n            if (this.isDetailedOutputDisabled) {\n                return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode]();\n            }\n            const errors = this.flattenValidationErrors(validationErrors);\n            return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode](errors);\n        };\n    }\n    toValidate(metadata) {\n        const { metatype, type } = metadata;\n        if (type === 'custom' && !this.validateCustomDecorators) {\n            return false;\n        }\n        const types = [String, Boolean, Number, Array, Object, Buffer];\n        return !types.some(t => metatype === t) && !shared_utils_1.isNil(metatype);\n    }\n    transformPrimitive(value, metadata) {\n        if (!metadata.data) {\n            // leave top-level query/param objects unmodified\n            return value;\n        }\n        const { type, metatype } = metadata;\n        if (type !== 'param' && type !== 'query') {\n            return value;\n        }\n        if (metatype === Boolean) {\n            return value === true || value === 'true';\n        }\n        if (metatype === Number) {\n            return +value;\n        }\n        return value;\n    }\n    toEmptyIfNil(value) {\n        return shared_utils_1.isNil(value) ? {} : value;\n    }\n    stripProtoKeys(value) {\n        delete value.__proto__;\n        const keys = Object.keys(value);\n        iterare_1.iterate(keys)\n            .filter(key => typeof value[key] === 'object' && value[key])\n            .forEach(key => this.stripProtoKeys(value[key]));\n    }\n    isPrimitive(value) {\n        return ['number', 'boolean', 'string'].includes(typeof value);\n    }\n    validate(object, validatorOptions) {\n        return classValidator.validate(object, validatorOptions);\n    }\n    flattenValidationErrors(validationErrors) {\n        return iterare_1.iterate(validationErrors)\n            .map(error => this.mapChildrenToValidationErrors(error))\n            .flatten()\n            .filter(item => !!item.constraints)\n            .map(item => Object.values(item.constraints))\n            .flatten()\n            .toArray();\n    }\n    mapChildrenToValidationErrors(error, parentPath) {\n        if (!(error.children && error.children.length)) {\n            return [error];\n        }\n        const validationErrors = [];\n        parentPath = parentPath\n            ? `${parentPath}.${error.property}`\n            : error.property;\n        for (const item of error.children) {\n            if (item.children && item.children.length) {\n                validationErrors.push(...this.mapChildrenToValidationErrors(item, parentPath));\n            }\n            validationErrors.push(this.prependConstraintsWithParentProp(parentPath, item));\n        }\n        return validationErrors;\n    }\n    prependConstraintsWithParentProp(parentPath, error) {\n        const constraints = {};\n        for (const key in error.constraints) {\n            constraints[key] = `${parentPath}.${error.constraints[key]}`;\n        }\n        return Object.assign(Object.assign({}, error), { constraints });\n    }\n};\nValidationPipe = tslib_1.__decorate([\n    core_1.Injectable(),\n    tslib_1.__param(0, decorators_1.Optional()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ValidationPipe);\nexports.ValidationPipe = ValidationPipe;\n"]},"metadata":{},"sourceType":"script"}