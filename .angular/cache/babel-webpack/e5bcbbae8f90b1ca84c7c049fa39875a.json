{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/cabra/PROJETOS/CIM/RDA/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseFloatPipe = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst index_1 = require(\"../index\");\n\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseFloat Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n\n\nlet ParseFloatPipe = class ParseFloatPipe {\n  constructor(options) {\n    options = options || {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST\n    } = options;\n\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n\n\n  transform(value, metadata) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const isNumeric = ['string', 'number'].includes(typeof value) && !isNaN(parseFloat(value)) && isFinite(value);\n\n      if (!isNumeric) {\n        throw _this.exceptionFactory('Validation failed (numeric string is expected)');\n      }\n\n      return parseFloat(value);\n    })();\n  }\n\n};\nParseFloatPipe = tslib_1.__decorate([index_1.Injectable(), tslib_1.__param(0, index_1.Optional()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseFloatPipe);\nexports.ParseFloatPipe = ParseFloatPipe;","map":{"version":3,"sources":["C:/Users/cabra/PROJETOS/CIM/BACKEND/node_modules/@nestjs/common/pipes/parse-float.pipe.js"],"names":["Object","defineProperty","exports","value","ParseFloatPipe","tslib_1","require","index_1","http_error_by_code_util_1","constructor","options","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","transform","metadata","isNumeric","includes","isNaN","parseFloat","isFinite","__decorate","Injectable","__param","Optional","__metadata"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,kCAAD,CAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIF,cAAc,GAAG,MAAMA,cAAN,CAAqB;AACtCK,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAM;AAAEC,MAAAA,gBAAF;AAAoBC,MAAAA,mBAAmB,GAAGL,OAAO,CAACM,UAAR,CAAmBC;AAA7D,QAA6EJ,OAAnF;;AACA,SAAKC,gBAAL,GACIA,gBAAgB,KACXI,KAAK,IAAI,IAAIP,yBAAyB,CAACQ,eAA1B,CAA0CJ,mBAA1C,CAAJ,CAAmEG,KAAnE,CADE,CADpB;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUE,EAAAA,SAAS,CAACd,KAAD,EAAQe,QAAR,EAAkB;AAAA;;AAAA;AAC7B,YAAMC,SAAS,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqBC,QAArB,CAA8B,OAAOjB,KAArC,KACd,CAACkB,KAAK,CAACC,UAAU,CAACnB,KAAD,CAAX,CADQ,IAEdoB,QAAQ,CAACpB,KAAD,CAFZ;;AAGA,UAAI,CAACgB,SAAL,EAAgB;AACZ,cAAM,KAAI,CAACR,gBAAL,CAAsB,gDAAtB,CAAN;AACH;;AACD,aAAOW,UAAU,CAACnB,KAAD,CAAjB;AAP6B;AAQhC;;AAvBqC,CAA1C;AAyBAC,cAAc,GAAGC,OAAO,CAACmB,UAAR,CAAmB,CAChCjB,OAAO,CAACkB,UAAR,EADgC,EAEhCpB,OAAO,CAACqB,OAAR,CAAgB,CAAhB,EAAmBnB,OAAO,CAACoB,QAAR,EAAnB,CAFgC,EAGhCtB,OAAO,CAACuB,UAAR,CAAmB,mBAAnB,EAAwC,CAAC5B,MAAD,CAAxC,CAHgC,CAAnB,EAIdI,cAJc,CAAjB;AAKAF,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseFloatPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst index_1 = require(\"../index\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseFloat Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseFloatPipe = class ParseFloatPipe {\n    constructor(options) {\n        options = options || {};\n        const { exceptionFactory, errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        const isNumeric = ['string', 'number'].includes(typeof value) &&\n            !isNaN(parseFloat(value)) &&\n            isFinite(value);\n        if (!isNumeric) {\n            throw this.exceptionFactory('Validation failed (numeric string is expected)');\n        }\n        return parseFloat(value);\n    }\n};\nParseFloatPipe = tslib_1.__decorate([\n    index_1.Injectable(),\n    tslib_1.__param(0, index_1.Optional()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ParseFloatPipe);\nexports.ParseFloatPipe = ParseFloatPipe;\n"]},"metadata":{},"sourceType":"script"}