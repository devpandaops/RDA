{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/cabra/PROJETOS/CIM/RDA/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseArrayPipe = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\n\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\n\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\n\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n\nconst validation_pipe_1 = require(\"./validation.pipe\");\n\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\nconst DEFAULT_ARRAY_SEPARATOR = ',';\n/**\n * Defines the built-in ParseArray Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n\nlet ParseArrayPipe = class ParseArrayPipe {\n  constructor(options = {}) {\n    this.options = options;\n    this.validationPipe = new validation_pipe_1.ValidationPipe(Object.assign({\n      transform: true,\n      validateCustomDecorators: true\n    }, options));\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST\n    } = options;\n\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n\n\n  transform(value, metadata) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!value && !_this.options.optional) {\n        throw _this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n      } else if (shared_utils_1.isNil(value) && _this.options.optional) {\n        return value;\n      }\n\n      if (!Array.isArray(value)) {\n        if (!shared_utils_1.isString(value)) {\n          throw _this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n        } else {\n          try {\n            value = value.trim().split(_this.options.separator || DEFAULT_ARRAY_SEPARATOR);\n          } catch (_a) {\n            throw _this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n          }\n        }\n      }\n\n      if (_this.options.items) {\n        const validationMetadata = {\n          metatype: _this.options.items,\n          type: 'query'\n        };\n\n        const isExpectedTypePrimitive = _this.isExpectedTypePrimitive();\n\n        const toClassInstance = (item, index) => {\n          try {\n            item = JSON.parse(item);\n          } catch (_a) {}\n\n          if (isExpectedTypePrimitive) {\n            return _this.validatePrimitive(item, index);\n          }\n\n          return _this.validationPipe.transform(item, validationMetadata);\n        };\n\n        if (_this.options.stopAtFirstError === false) {\n          // strict compare to \"false\" to make sure\n          // that this option is disabled by default\n          let errors = [];\n          const targetArray = value;\n\n          for (let i = 0; i < targetArray.length; i++) {\n            try {\n              targetArray[i] = yield toClassInstance(targetArray[i]);\n            } catch (err) {\n              let message;\n\n              if (err.getResponse) {\n                const response = err.getResponse();\n\n                if (Array.isArray(response.message)) {\n                  message = response.message.map(item => `[${i}] ${item}`);\n                } else {\n                  message = `[${i}] ${response.message}`;\n                }\n              } else {\n                message = err;\n              }\n\n              errors = errors.concat(message);\n            }\n          }\n\n          if (errors.length > 0) {\n            throw _this.exceptionFactory(errors);\n          }\n\n          return targetArray;\n        } else {\n          value = yield Promise.all(value.map(toClassInstance));\n        }\n      }\n\n      return value;\n    })();\n  }\n\n  isExpectedTypePrimitive() {\n    return [Boolean, Number, String].includes(this.options.items);\n  }\n\n  validatePrimitive(originalValue, index) {\n    if (this.options.items === Number) {\n      const value = originalValue !== null && originalValue !== '' ? +originalValue : NaN;\n\n      if (isNaN(value)) {\n        throw this.exceptionFactory(`${typeof index !== 'undefined' ? `[${index}] ` : ''}item must be a number`);\n      }\n\n      return value;\n    } else if (this.options.items === String) {\n      if (typeof originalValue !== 'string') {\n        return `${originalValue}`;\n      }\n    } else if (this.options.items === Boolean) {\n      if (typeof originalValue !== 'boolean') {\n        throw this.exceptionFactory(`${typeof index !== 'undefined' ? `[${index}] ` : ''}item must be a boolean value`);\n      }\n    }\n\n    return originalValue;\n  }\n\n};\nParseArrayPipe = tslib_1.__decorate([injectable_decorator_1.Injectable(), tslib_1.__param(0, optional_decorator_1.Optional()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseArrayPipe);\nexports.ParseArrayPipe = ParseArrayPipe;","map":{"version":3,"sources":["C:/Users/cabra/PROJETOS/CIM/BACKEND/node_modules/@nestjs/common/pipes/parse-array.pipe.js"],"names":["Object","defineProperty","exports","value","ParseArrayPipe","tslib_1","require","injectable_decorator_1","optional_decorator_1","http_status_enum_1","http_error_by_code_util_1","shared_utils_1","validation_pipe_1","VALIDATION_ERROR_MESSAGE","DEFAULT_ARRAY_SEPARATOR","constructor","options","validationPipe","ValidationPipe","assign","transform","validateCustomDecorators","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","metadata","optional","isNil","Array","isArray","isString","trim","split","separator","_a","items","validationMetadata","metatype","type","isExpectedTypePrimitive","toClassInstance","item","index","JSON","parse","validatePrimitive","stopAtFirstError","errors","targetArray","i","length","err","message","getResponse","response","map","concat","Promise","all","Boolean","Number","String","includes","originalValue","NaN","isNaN","__decorate","Injectable","__param","Optional","__metadata"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,yCAAD,CAAtC;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,uCAAD,CAApC;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,2BAAD,CAAlC;;AACA,MAAMI,yBAAyB,GAAGJ,OAAO,CAAC,kCAAD,CAAzC;;AACA,MAAMK,cAAc,GAAGL,OAAO,CAAC,uBAAD,CAA9B;;AACA,MAAMM,iBAAiB,GAAGN,OAAO,CAAC,mBAAD,CAAjC;;AACA,MAAMO,wBAAwB,GAAG,6CAAjC;AACA,MAAMC,uBAAuB,GAAG,GAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIV,cAAc,GAAG,MAAMA,cAAN,CAAqB;AACtCW,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACtB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,cAAL,GAAsB,IAAIL,iBAAiB,CAACM,cAAtB,CAAqClB,MAAM,CAACmB,MAAP,CAAc;AAAEC,MAAAA,SAAS,EAAE,IAAb;AAAmBC,MAAAA,wBAAwB,EAAE;AAA7C,KAAd,EAAmEL,OAAnE,CAArC,CAAtB;AACA,UAAM;AAAEM,MAAAA,gBAAF;AAAoBC,MAAAA,mBAAmB,GAAGd,kBAAkB,CAACe,UAAnB,CAA8BC;AAAxE,QAAwFT,OAA9F;;AACA,SAAKM,gBAAL,GACIA,gBAAgB,KACXI,KAAK,IAAI,IAAIhB,yBAAyB,CAACiB,eAA1B,CAA0CJ,mBAA1C,CAAJ,CAAmEG,KAAnE,CADE,CADpB;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUN,EAAAA,SAAS,CAACjB,KAAD,EAAQyB,QAAR,EAAkB;AAAA;;AAAA;AAC7B,UAAI,CAACzB,KAAD,IAAU,CAAC,KAAI,CAACa,OAAL,CAAaa,QAA5B,EAAsC;AAClC,cAAM,KAAI,CAACP,gBAAL,CAAsBT,wBAAtB,CAAN;AACH,OAFD,MAGK,IAAIF,cAAc,CAACmB,KAAf,CAAqB3B,KAArB,KAA+B,KAAI,CAACa,OAAL,CAAaa,QAAhD,EAA0D;AAC3D,eAAO1B,KAAP;AACH;;AACD,UAAI,CAAC4B,KAAK,CAACC,OAAN,CAAc7B,KAAd,CAAL,EAA2B;AACvB,YAAI,CAACQ,cAAc,CAACsB,QAAf,CAAwB9B,KAAxB,CAAL,EAAqC;AACjC,gBAAM,KAAI,CAACmB,gBAAL,CAAsBT,wBAAtB,CAAN;AACH,SAFD,MAGK;AACD,cAAI;AACAV,YAAAA,KAAK,GAAGA,KAAK,CACR+B,IADG,GAEHC,KAFG,CAEG,KAAI,CAACnB,OAAL,CAAaoB,SAAb,IAA0BtB,uBAF7B,CAAR;AAGH,WAJD,CAKA,OAAOuB,EAAP,EAAW;AACP,kBAAM,KAAI,CAACf,gBAAL,CAAsBT,wBAAtB,CAAN;AACH;AACJ;AACJ;;AACD,UAAI,KAAI,CAACG,OAAL,CAAasB,KAAjB,EAAwB;AACpB,cAAMC,kBAAkB,GAAG;AACvBC,UAAAA,QAAQ,EAAE,KAAI,CAACxB,OAAL,CAAasB,KADA;AAEvBG,UAAAA,IAAI,EAAE;AAFiB,SAA3B;;AAIA,cAAMC,uBAAuB,GAAG,KAAI,CAACA,uBAAL,EAAhC;;AACA,cAAMC,eAAe,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACrC,cAAI;AACAD,YAAAA,IAAI,GAAGE,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAP;AACH,WAFD,CAGA,OAAOP,EAAP,EAAW,CAAG;;AACd,cAAIK,uBAAJ,EAA6B;AACzB,mBAAO,KAAI,CAACM,iBAAL,CAAuBJ,IAAvB,EAA6BC,KAA7B,CAAP;AACH;;AACD,iBAAO,KAAI,CAAC5B,cAAL,CAAoBG,SAApB,CAA8BwB,IAA9B,EAAoCL,kBAApC,CAAP;AACH,SATD;;AAUA,YAAI,KAAI,CAACvB,OAAL,CAAaiC,gBAAb,KAAkC,KAAtC,EAA6C;AACzC;AACA;AACA,cAAIC,MAAM,GAAG,EAAb;AACA,gBAAMC,WAAW,GAAGhD,KAApB;;AACA,eAAK,IAAIiD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,gBAAI;AACAD,cAAAA,WAAW,CAACC,CAAD,CAAX,SAAuBT,eAAe,CAACQ,WAAW,CAACC,CAAD,CAAZ,CAAtC;AACH,aAFD,CAGA,OAAOE,GAAP,EAAY;AACR,kBAAIC,OAAJ;;AACA,kBAAID,GAAG,CAACE,WAAR,EAAqB;AACjB,sBAAMC,QAAQ,GAAGH,GAAG,CAACE,WAAJ,EAAjB;;AACA,oBAAIzB,KAAK,CAACC,OAAN,CAAcyB,QAAQ,CAACF,OAAvB,CAAJ,EAAqC;AACjCA,kBAAAA,OAAO,GAAGE,QAAQ,CAACF,OAAT,CAAiBG,GAAjB,CAAsBd,IAAD,IAAW,IAAGQ,CAAE,KAAIR,IAAK,EAA9C,CAAV;AACH,iBAFD,MAGK;AACDW,kBAAAA,OAAO,GAAI,IAAGH,CAAE,KAAIK,QAAQ,CAACF,OAAQ,EAArC;AACH;AACJ,eARD,MASK;AACDA,gBAAAA,OAAO,GAAGD,GAAV;AACH;;AACDJ,cAAAA,MAAM,GAAGA,MAAM,CAACS,MAAP,CAAcJ,OAAd,CAAT;AACH;AACJ;;AACD,cAAIL,MAAM,CAACG,MAAP,GAAgB,CAApB,EAAuB;AACnB,kBAAM,KAAI,CAAC/B,gBAAL,CAAsB4B,MAAtB,CAAN;AACH;;AACD,iBAAOC,WAAP;AACH,SA9BD,MA+BK;AACDhD,UAAAA,KAAK,SAASyD,OAAO,CAACC,GAAR,CAAY1D,KAAK,CAACuD,GAAN,CAAUf,eAAV,CAAZ,CAAd;AACH;AACJ;;AACD,aAAOxC,KAAP;AAzE6B;AA0EhC;;AACDuC,EAAAA,uBAAuB,GAAG;AACtB,WAAO,CAACoB,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,QAA1B,CAAmC,KAAKjD,OAAL,CAAasB,KAAhD,CAAP;AACH;;AACDU,EAAAA,iBAAiB,CAACkB,aAAD,EAAgBrB,KAAhB,EAAuB;AACpC,QAAI,KAAK7B,OAAL,CAAasB,KAAb,KAAuByB,MAA3B,EAAmC;AAC/B,YAAM5D,KAAK,GAAG+D,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,EAA5C,GAAiD,CAACA,aAAlD,GAAkEC,GAAhF;;AACA,UAAIC,KAAK,CAACjE,KAAD,CAAT,EAAkB;AACd,cAAM,KAAKmB,gBAAL,CAAuB,GAAE,OAAOuB,KAAP,KAAiB,WAAjB,GAAgC,IAAGA,KAAM,IAAzC,GAA+C,EAAG,uBAA3E,CAAN;AACH;;AACD,aAAO1C,KAAP;AACH,KAND,MAOK,IAAI,KAAKa,OAAL,CAAasB,KAAb,KAAuB0B,MAA3B,EAAmC;AACpC,UAAI,OAAOE,aAAP,KAAyB,QAA7B,EAAuC;AACnC,eAAQ,GAAEA,aAAc,EAAxB;AACH;AACJ,KAJI,MAKA,IAAI,KAAKlD,OAAL,CAAasB,KAAb,KAAuBwB,OAA3B,EAAoC;AACrC,UAAI,OAAOI,aAAP,KAAyB,SAA7B,EAAwC;AACpC,cAAM,KAAK5C,gBAAL,CAAuB,GAAE,OAAOuB,KAAP,KAAiB,WAAjB,GAAgC,IAAGA,KAAM,IAAzC,GAA+C,EAAG,8BAA3E,CAAN;AACH;AACJ;;AACD,WAAOqB,aAAP;AACH;;AAjHqC,CAA1C;AAmHA9D,cAAc,GAAGC,OAAO,CAACgE,UAAR,CAAmB,CAChC9D,sBAAsB,CAAC+D,UAAvB,EADgC,EAEhCjE,OAAO,CAACkE,OAAR,CAAgB,CAAhB,EAAmB/D,oBAAoB,CAACgE,QAArB,EAAnB,CAFgC,EAGhCnE,OAAO,CAACoE,UAAR,CAAmB,mBAAnB,EAAwC,CAACzE,MAAD,CAAxC,CAHgC,CAAnB,EAIdI,cAJc,CAAjB;AAKAF,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseArrayPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nconst validation_pipe_1 = require(\"./validation.pipe\");\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\nconst DEFAULT_ARRAY_SEPARATOR = ',';\n/**\n * Defines the built-in ParseArray Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseArrayPipe = class ParseArrayPipe {\n    constructor(options = {}) {\n        this.options = options;\n        this.validationPipe = new validation_pipe_1.ValidationPipe(Object.assign({ transform: true, validateCustomDecorators: true }, options));\n        const { exceptionFactory, errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        if (!value && !this.options.optional) {\n            throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n        }\n        else if (shared_utils_1.isNil(value) && this.options.optional) {\n            return value;\n        }\n        if (!Array.isArray(value)) {\n            if (!shared_utils_1.isString(value)) {\n                throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n            }\n            else {\n                try {\n                    value = value\n                        .trim()\n                        .split(this.options.separator || DEFAULT_ARRAY_SEPARATOR);\n                }\n                catch (_a) {\n                    throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n                }\n            }\n        }\n        if (this.options.items) {\n            const validationMetadata = {\n                metatype: this.options.items,\n                type: 'query',\n            };\n            const isExpectedTypePrimitive = this.isExpectedTypePrimitive();\n            const toClassInstance = (item, index) => {\n                try {\n                    item = JSON.parse(item);\n                }\n                catch (_a) { }\n                if (isExpectedTypePrimitive) {\n                    return this.validatePrimitive(item, index);\n                }\n                return this.validationPipe.transform(item, validationMetadata);\n            };\n            if (this.options.stopAtFirstError === false) {\n                // strict compare to \"false\" to make sure\n                // that this option is disabled by default\n                let errors = [];\n                const targetArray = value;\n                for (let i = 0; i < targetArray.length; i++) {\n                    try {\n                        targetArray[i] = await toClassInstance(targetArray[i]);\n                    }\n                    catch (err) {\n                        let message;\n                        if (err.getResponse) {\n                            const response = err.getResponse();\n                            if (Array.isArray(response.message)) {\n                                message = response.message.map((item) => `[${i}] ${item}`);\n                            }\n                            else {\n                                message = `[${i}] ${response.message}`;\n                            }\n                        }\n                        else {\n                            message = err;\n                        }\n                        errors = errors.concat(message);\n                    }\n                }\n                if (errors.length > 0) {\n                    throw this.exceptionFactory(errors);\n                }\n                return targetArray;\n            }\n            else {\n                value = await Promise.all(value.map(toClassInstance));\n            }\n        }\n        return value;\n    }\n    isExpectedTypePrimitive() {\n        return [Boolean, Number, String].includes(this.options.items);\n    }\n    validatePrimitive(originalValue, index) {\n        if (this.options.items === Number) {\n            const value = originalValue !== null && originalValue !== '' ? +originalValue : NaN;\n            if (isNaN(value)) {\n                throw this.exceptionFactory(`${typeof index !== 'undefined' ? `[${index}] ` : ''}item must be a number`);\n            }\n            return value;\n        }\n        else if (this.options.items === String) {\n            if (typeof originalValue !== 'string') {\n                return `${originalValue}`;\n            }\n        }\n        else if (this.options.items === Boolean) {\n            if (typeof originalValue !== 'boolean') {\n                throw this.exceptionFactory(`${typeof index !== 'undefined' ? `[${index}] ` : ''}item must be a boolean value`);\n            }\n        }\n        return originalValue;\n    }\n};\nParseArrayPipe = tslib_1.__decorate([\n    injectable_decorator_1.Injectable(),\n    tslib_1.__param(0, optional_decorator_1.Optional()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ParseArrayPipe);\nexports.ParseArrayPipe = ParseArrayPipe;\n"]},"metadata":{},"sourceType":"script"}