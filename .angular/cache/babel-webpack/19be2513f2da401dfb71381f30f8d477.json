{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Res = exports.Req = exports.HostParam = exports.Param = exports.Body = exports.Query = exports.Headers = exports.UploadedFiles = exports.UploadedFile = exports.Session = exports.Ip = exports.Next = exports.Response = exports.Request = exports.assignMetadata = void 0;\n\nconst constants_1 = require(\"../../constants\");\n\nconst route_paramtypes_enum_1 = require(\"../../enums/route-paramtypes.enum\");\n\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n\nfunction assignMetadata(args, paramtype, index, data, ...pipes) {\n  return Object.assign(Object.assign({}, args), {\n    [`${paramtype}:${index}`]: {\n      index,\n      data,\n      pipes\n    }\n  });\n}\n\nexports.assignMetadata = assignMetadata;\n\nfunction createRouteParamDecorator(paramtype) {\n  return data => (target, key, index) => {\n    const args = Reflect.getMetadata(constants_1.ROUTE_ARGS_METADATA, target.constructor, key) || {};\n    Reflect.defineMetadata(constants_1.ROUTE_ARGS_METADATA, assignMetadata(args, paramtype, index, data), target.constructor, key);\n  };\n}\n\nconst createPipesRouteParamDecorator = paramtype => (data, ...pipes) => (target, key, index) => {\n  const args = Reflect.getMetadata(constants_1.ROUTE_ARGS_METADATA, target.constructor, key) || {};\n  const hasParamData = shared_utils_1.isNil(data) || shared_utils_1.isString(data);\n  const paramData = hasParamData ? data : undefined;\n  const paramPipes = hasParamData ? pipes : [data, ...pipes];\n  Reflect.defineMetadata(constants_1.ROUTE_ARGS_METADATA, assignMetadata(args, paramtype, index, paramData, ...paramPipes), target.constructor, key);\n};\n/**\n * Route handler parameter decorator. Extracts the `Request`\n * object from the underlying platform and populates the decorated\n * parameter with the value of `Request`.\n *\n * Example: `logout(@Request() req)`\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\n\nexports.Request = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.REQUEST);\n/**\n * Route handler parameter decorator. Extracts the `Response`\n * object from the underlying platform and populates the decorated\n * parameter with the value of `Response`.\n *\n * Example: `logout(@Response() res)`\n *\n * @publicApi\n */\n\nconst Response = options => (target, key, index) => {\n  if (options === null || options === void 0 ? void 0 : options.passthrough) {\n    Reflect.defineMetadata(constants_1.RESPONSE_PASSTHROUGH_METADATA, options === null || options === void 0 ? void 0 : options.passthrough, target.constructor, key);\n  }\n\n  return createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.RESPONSE)()(target, key, index);\n};\n\nexports.Response = Response;\n/**\n * Route handler parameter decorator. Extracts reference to the `Next` function\n * from the underlying platform and populates the decorated\n * parameter with the value of `Next`.\n *\n * @publicApi\n */\n\nexports.Next = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.NEXT);\n/**\n * Route handler parameter decorator. Extracts the `Ip` property\n * from the `req` object and populates the decorated\n * parameter with the value of `ip`.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\nexports.Ip = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.IP);\n/**\n * Route handler parameter decorator. Extracts the `Session` object\n * from the underlying platform and populates the decorated\n * parameter with the value of `Session`.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\nexports.Session = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.SESSION);\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\n\nfunction UploadedFile(fileKey, ...pipes) {\n  return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.FILE)(fileKey, ...pipes);\n}\n\nexports.UploadedFile = UploadedFile;\n/**\n * Route handler parameter decorator. Extracts the `files` object\n * and populates the decorated parameter with the value of `files`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFiles() files) {\n *   console.log(files);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\n\nfunction UploadedFiles(...pipes) {\n  return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.FILES)(undefined, ...pipes);\n}\n\nexports.UploadedFiles = UploadedFiles;\n/**\n * Route handler parameter decorator. Extracts the `headers`\n * property from the `req` object and populates the decorated\n * parameter with the value of `headers`.\n *\n * For example: `async update(@Headers('Cache-Control') cacheControl: string)`\n *\n * @param property name of single header property to extract.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\nexports.Headers = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.HEADERS);\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\nfunction Query(property, ...pipes) {\n  return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.QUERY)(property, ...pipes);\n}\n\nexports.Query = Query;\n/**\n * Route handler parameter decorator. Extracts the entire `body` object\n * property, or optionally a named property of the `body` object, from\n * the `req` object and populates the decorated parameter with that value.\n * Also applies pipes to the bound body parameter.\n *\n * For example:\n * ```typescript\n * async create(@Body('role', new ValidationPipe()) role: string)\n * ```\n *\n * @param property name of single property to extract from the `body` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound body parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\n\nfunction Body(property, ...pipes) {\n  return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.BODY)(property, ...pipes);\n}\n\nexports.Body = Body;\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\n\nfunction Param(property, ...pipes) {\n  return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.PARAM)(property, ...pipes);\n}\n\nexports.Param = Param;\n/**\n * Route handler parameter decorator. Extracts the `hosts`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@HostParam() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@HostParam('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\n\nfunction HostParam(property) {\n  return createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.HOST)(property);\n}\n\nexports.HostParam = HostParam;\nexports.Req = exports.Request;\nexports.Res = exports.Response;","map":{"version":3,"sources":["C:/Users/cabra/PROJETOS/CIM/BACKEND/node_modules/@nestjs/common/decorators/http/route-params.decorator.js"],"names":["Object","defineProperty","exports","value","Res","Req","HostParam","Param","Body","Query","Headers","UploadedFiles","UploadedFile","Session","Ip","Next","Response","Request","assignMetadata","constants_1","require","route_paramtypes_enum_1","shared_utils_1","args","paramtype","index","data","pipes","assign","createRouteParamDecorator","target","key","Reflect","getMetadata","ROUTE_ARGS_METADATA","constructor","defineMetadata","createPipesRouteParamDecorator","hasParamData","isNil","isString","paramData","undefined","paramPipes","RouteParamtypes","REQUEST","options","passthrough","RESPONSE_PASSTHROUGH_METADATA","RESPONSE","NEXT","IP","SESSION","fileKey","FILE","FILES","HEADERS","property","QUERY","BODY","PARAM","HOST"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAT,OAAO,CAACQ,OAAR,GAAkBmB,yBAAyB,CAACR,uBAAuB,CAACuB,eAAxB,CAAwCY,OAAzC,CAA3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS/C,KAAT,CAAegD,QAAf,EAAyB,GAAG9B,KAA5B,EAAmC;AAC/B,SAAOU,8BAA8B,CAAChB,uBAAuB,CAACuB,eAAxB,CAAwCc,KAAzC,CAA9B,CAA8ED,QAA9E,EAAwF,GAAG9B,KAA3F,CAAP;AACH;;AACDzB,OAAO,CAACO,KAAR,GAAgBA,KAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,IAAT,CAAciD,QAAd,EAAwB,GAAG9B,KAA3B,EAAkC;AAC9B,SAAOU,8BAA8B,CAAChB,uBAAuB,CAACuB,eAAxB,CAAwCe,IAAzC,CAA9B,CAA6EF,QAA7E,EAAuF,GAAG9B,KAA1F,CAAP;AACH;;AACDzB,OAAO,CAACM,IAAR,GAAeA,IAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,KAAT,CAAekD,QAAf,EAAyB,GAAG9B,KAA5B,EAAmC;AAC/B,SAAOU,8BAA8B,CAAChB,uBAAuB,CAACuB,eAAxB,CAAwCgB,KAAzC,CAA9B,CAA8EH,QAA9E,EAAwF,GAAG9B,KAA3F,CAAP;AACH;;AACDzB,OAAO,CAACK,KAAR,GAAgBA,KAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,SAAT,CAAmBmD,QAAnB,EAA6B;AACzB,SAAO5B,yBAAyB,CAACR,uBAAuB,CAACuB,eAAxB,CAAwCiB,IAAzC,CAAzB,CAAwEJ,QAAxE,CAAP;AACH;;AACDvD,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACAJ,OAAO,CAACG,GAAR,GAAcH,OAAO,CAACe,OAAtB;AACAf,OAAO,CAACE,GAAR,GAAcF,OAAO,CAACc,QAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Res = exports.Req = exports.HostParam = exports.Param = exports.Body = exports.Query = exports.Headers = exports.UploadedFiles = exports.UploadedFile = exports.Session = exports.Ip = exports.Next = exports.Response = exports.Request = exports.assignMetadata = void 0;\nconst constants_1 = require(\"../../constants\");\nconst route_paramtypes_enum_1 = require(\"../../enums/route-paramtypes.enum\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\nfunction assignMetadata(args, paramtype, index, data, ...pipes) {\n    return Object.assign(Object.assign({}, args), { [`${paramtype}:${index}`]: {\n            index,\n            data,\n            pipes,\n        } });\n}\nexports.assignMetadata = assignMetadata;\nfunction createRouteParamDecorator(paramtype) {\n    return (data) => (target, key, index) => {\n        const args = Reflect.getMetadata(constants_1.ROUTE_ARGS_METADATA, target.constructor, key) || {};\n        Reflect.defineMetadata(constants_1.ROUTE_ARGS_METADATA, assignMetadata(args, paramtype, index, data), target.constructor, key);\n    };\n}\nconst createPipesRouteParamDecorator = (paramtype) => (data, ...pipes) => (target, key, index) => {\n    const args = Reflect.getMetadata(constants_1.ROUTE_ARGS_METADATA, target.constructor, key) || {};\n    const hasParamData = shared_utils_1.isNil(data) || shared_utils_1.isString(data);\n    const paramData = hasParamData ? data : undefined;\n    const paramPipes = hasParamData ? pipes : [data, ...pipes];\n    Reflect.defineMetadata(constants_1.ROUTE_ARGS_METADATA, assignMetadata(args, paramtype, index, paramData, ...paramPipes), target.constructor, key);\n};\n/**\n * Route handler parameter decorator. Extracts the `Request`\n * object from the underlying platform and populates the decorated\n * parameter with the value of `Request`.\n *\n * Example: `logout(@Request() req)`\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexports.Request = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.REQUEST);\n/**\n * Route handler parameter decorator. Extracts the `Response`\n * object from the underlying platform and populates the decorated\n * parameter with the value of `Response`.\n *\n * Example: `logout(@Response() res)`\n *\n * @publicApi\n */\nconst Response = (options) => (target, key, index) => {\n    if (options === null || options === void 0 ? void 0 : options.passthrough) {\n        Reflect.defineMetadata(constants_1.RESPONSE_PASSTHROUGH_METADATA, options === null || options === void 0 ? void 0 : options.passthrough, target.constructor, key);\n    }\n    return createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.RESPONSE)()(target, key, index);\n};\nexports.Response = Response;\n/**\n * Route handler parameter decorator. Extracts reference to the `Next` function\n * from the underlying platform and populates the decorated\n * parameter with the value of `Next`.\n *\n * @publicApi\n */\nexports.Next = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.NEXT);\n/**\n * Route handler parameter decorator. Extracts the `Ip` property\n * from the `req` object and populates the decorated\n * parameter with the value of `ip`.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexports.Ip = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.IP);\n/**\n * Route handler parameter decorator. Extracts the `Session` object\n * from the underlying platform and populates the decorated\n * parameter with the value of `Session`.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexports.Session = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.SESSION);\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nfunction UploadedFile(fileKey, ...pipes) {\n    return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.FILE)(fileKey, ...pipes);\n}\nexports.UploadedFile = UploadedFile;\n/**\n * Route handler parameter decorator. Extracts the `files` object\n * and populates the decorated parameter with the value of `files`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFiles() files) {\n *   console.log(files);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nfunction UploadedFiles(...pipes) {\n    return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.FILES)(undefined, ...pipes);\n}\nexports.UploadedFiles = UploadedFiles;\n/**\n * Route handler parameter decorator. Extracts the `headers`\n * property from the `req` object and populates the decorated\n * parameter with the value of `headers`.\n *\n * For example: `async update(@Headers('Cache-Control') cacheControl: string)`\n *\n * @param property name of single header property to extract.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexports.Headers = createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.HEADERS);\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nfunction Query(property, ...pipes) {\n    return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.QUERY)(property, ...pipes);\n}\nexports.Query = Query;\n/**\n * Route handler parameter decorator. Extracts the entire `body` object\n * property, or optionally a named property of the `body` object, from\n * the `req` object and populates the decorated parameter with that value.\n * Also applies pipes to the bound body parameter.\n *\n * For example:\n * ```typescript\n * async create(@Body('role', new ValidationPipe()) role: string)\n * ```\n *\n * @param property name of single property to extract from the `body` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound body parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nfunction Body(property, ...pipes) {\n    return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.BODY)(property, ...pipes);\n}\nexports.Body = Body;\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nfunction Param(property, ...pipes) {\n    return createPipesRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.PARAM)(property, ...pipes);\n}\nexports.Param = Param;\n/**\n * Route handler parameter decorator. Extracts the `hosts`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@HostParam() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@HostParam('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nfunction HostParam(property) {\n    return createRouteParamDecorator(route_paramtypes_enum_1.RouteParamtypes.HOST)(property);\n}\nexports.HostParam = HostParam;\nexports.Req = exports.Request;\nexports.Res = exports.Response;\n"]},"metadata":{},"sourceType":"script"}