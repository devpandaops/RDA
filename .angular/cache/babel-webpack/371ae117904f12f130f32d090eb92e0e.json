{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/cabra/PROJETOS/CIM/RDA/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseBoolPipe = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\n\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\n\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\n\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseBool Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n\n\nlet ParseBoolPipe = class ParseBoolPipe {\n  constructor(options) {\n    options = options || {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST\n    } = options;\n\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n\n\n  transform(value, metadata) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (value === true || value === 'true') {\n        return true;\n      }\n\n      if (value === false || value === 'false') {\n        return false;\n      }\n\n      throw _this.exceptionFactory('Validation failed (boolean string is expected)');\n    })();\n  }\n\n};\nParseBoolPipe = tslib_1.__decorate([injectable_decorator_1.Injectable(), tslib_1.__param(0, optional_decorator_1.Optional()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseBoolPipe);\nexports.ParseBoolPipe = ParseBoolPipe;","map":{"version":3,"sources":["C:/Users/cabra/PROJETOS/CIM/BACKEND/node_modules/@nestjs/common/pipes/parse-bool.pipe.js"],"names":["Object","defineProperty","exports","value","ParseBoolPipe","tslib_1","require","injectable_decorator_1","optional_decorator_1","http_status_enum_1","http_error_by_code_util_1","constructor","options","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","transform","metadata","__decorate","Injectable","__param","Optional","__metadata"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,yCAAD,CAAtC;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,uCAAD,CAApC;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,2BAAD,CAAlC;;AACA,MAAMI,yBAAyB,GAAGJ,OAAO,CAAC,kCAAD,CAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIF,aAAa,GAAG,MAAMA,aAAN,CAAoB;AACpCO,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAM;AAAEC,MAAAA,gBAAF;AAAoBC,MAAAA,mBAAmB,GAAGL,kBAAkB,CAACM,UAAnB,CAA8BC;AAAxE,QAAwFJ,OAA9F;;AACA,SAAKC,gBAAL,GACIA,gBAAgB,KACXI,KAAK,IAAI,IAAIP,yBAAyB,CAACQ,eAA1B,CAA0CJ,mBAA1C,CAAJ,CAAmEG,KAAnE,CADE,CADpB;AAGH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUE,EAAAA,SAAS,CAAChB,KAAD,EAAQiB,QAAR,EAAkB;AAAA;;AAAA;AAC7B,UAAIjB,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,MAAhC,EAAwC;AACpC,eAAO,IAAP;AACH;;AACD,UAAIA,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,OAAjC,EAA0C;AACtC,eAAO,KAAP;AACH;;AACD,YAAM,KAAI,CAACU,gBAAL,CAAsB,gDAAtB,CAAN;AAP6B;AAQhC;;AAvBmC,CAAxC;AAyBAT,aAAa,GAAGC,OAAO,CAACgB,UAAR,CAAmB,CAC/Bd,sBAAsB,CAACe,UAAvB,EAD+B,EAE/BjB,OAAO,CAACkB,OAAR,CAAgB,CAAhB,EAAmBf,oBAAoB,CAACgB,QAArB,EAAnB,CAF+B,EAG/BnB,OAAO,CAACoB,UAAR,CAAmB,mBAAnB,EAAwC,CAACzB,MAAD,CAAxC,CAH+B,CAAnB,EAIbI,aAJa,CAAhB;AAKAF,OAAO,CAACE,aAAR,GAAwBA,aAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseBoolPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseBool Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseBoolPipe = class ParseBoolPipe {\n    constructor(options) {\n        options = options || {};\n        const { exceptionFactory, errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        if (value === true || value === 'true') {\n            return true;\n        }\n        if (value === false || value === 'false') {\n            return false;\n        }\n        throw this.exceptionFactory('Validation failed (boolean string is expected)');\n    }\n};\nParseBoolPipe = tslib_1.__decorate([\n    injectable_decorator_1.Injectable(),\n    tslib_1.__param(0, optional_decorator_1.Optional()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ParseBoolPipe);\nexports.ParseBoolPipe = ParseBoolPipe;\n"]},"metadata":{},"sourceType":"script"}